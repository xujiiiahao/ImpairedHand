import torch

def repulsion_loss(finger_verts_dict, threshold=0.001):

    finger_names = list(finger_verts_dict.keys())
    B = next(iter(finger_verts_dict.values())).shape[0]
    device = next(iter(finger_verts_dict.values())).device

    total_loss_per_sample = torch.zeros(B, device=device)
    pair_count = 0

    for i in range(len(finger_names)):
        for j in range(i + 1, len(finger_names)):
            vi = finger_verts_dict[finger_names[i]]  # [B, Ni, 3]
            vj = finger_verts_dict[finger_names[j]]  # [B, Nj, 3]

            dists = torch.cdist(vi, vj, p=2)                   # [B, Ni, Nj]
            penalized = torch.relu(threshold - dists)         # [B, Ni, Nj]
            mask = (penalized > 0).float()                    # [B, Ni, Nj]
            num_valid = mask.sum(dim=(1, 2)).clamp(min=1.0)   # [B]

            per_sample_loss = (penalized * mask).sum(dim=(1, 2)) / num_valid  # [B]
            total_loss_per_sample += per_sample_loss
            pair_count += 1

    return (total_loss_per_sample / pair_count).mean()

def get_finger_indices(finger_name):
    finger_dict = {
        "thumb": torch.tensor([
            2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 28, 29, 30, 31, 36, 40, 42, 43,
            89, 104, 105, 114, 115, 123, 124, 125, 126, 230, 231, 233, 236, 240, 248, 249,
            250, 251, 252, 253, 264, 266, 267, 286, 287,
            697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
            713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
            729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
            745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
            761, 762, 763, 764, 765, 766, 767, 768
        ]),
        "index": torch.tensor([
            46, 47, 48, 49, 56, 57, 58, 59, 86, 87, 133, 134, 135, 136, 140, 155, 156, 164,
            165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 186, 189, 194,
            195, 212, 213, 221, 222, 223, 224, 225, 226, 237, 238, 245, 258, 260, 261, 263,
            272, 273, 274, 280, 281, 282, 283, 294, 295, 296, 297, 298, 299, 300, 301, 302,
            303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
            319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
            335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
            351, 352, 353, 354, 355
        ]),
        "middle": torch.tensor([
            185, 228, 262, 269, 270, 277, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
            366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384,
            385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
            401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
            417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
            433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
            449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
            465, 466, 467
        ]),
        "ring": torch.tensor([
            76, 163, 247, 291, 292, 293, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
            478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
            494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
            511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
            527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
            543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
            559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
            575, 576, 577, 578
        ]),
        "pinky": torch.tensor([
            82, 201, 202, 278, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
            592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 612, 613,
            614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
            630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
            646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
            662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
            678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
            694, 695, 696
        ])
    }

    if finger_name not in finger_dict:
        raise ValueError(f"Invalid finger name: {finger_name}. "
                         f"Choose from {list(finger_dict.keys())}")

    return finger_dict[finger_name]

if __name__ == "__main__" :
    B = 64      # batch size
    N = 180

    f1 = torch.randn(B, 3)
    f2 = torch.randn(B, 3)
    f3 = torch.randn(B, 3)
    f4 = torch.randn(B, 3)
    f5 = torch.randn(B, 3)
    
    finger_verts = {
    "index": f1,
    "middle": f2,
    "ring": f3,
    "pinky": f4,
    "thumb": f5,
                }
    repulse_loss = repulsion_loss(finger_verts, threshold=0.0005)
    print(repulse_loss)
